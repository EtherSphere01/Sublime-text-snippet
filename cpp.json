{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

  "Checking From Both side": {
  "prefix": "checkingfromallside",
  "body": [
    "ll cehckingFromAllSide(vector<vector<ll>>&arr){",
    "    // One based index array",
    "    // Row = i;",
    "    // Column = j;",
    "    ll count = 0;",
    "    ll n = arr.size()-1;",
    "    for (ll i = 1; i <= n; i++){",
    "        for (ll j = 1; j <= n; j++){",
    "            if(arr[i][j]!=arr[n-i+1][n-j+1]){",
    "                count++;",
    "            }",
    "        }",
    "    }",
    "    return count / 2; // As we are counting twice from both side;",
    "}"
  ],
  "description": ""
},

  "Smallest Prime Factorization": {
  "prefix": "spf",
  "body": [
    "vector<ll> spf;",
    "vector<ll> createSpf(ll n) {",
    "    vector<ll> spff(n + 1);",
    "    for (ll i = 1; i<=n; i++) {",
    "        spff[i] = i;",
    "    }",
    "    ",
    "    for (ll i = 2; i*i <= n; ++i) {",
    "        if (spff[i] == i) {",
    "            for (ll j = i * i; j <= n; j += i) {",
    "                if(spff[j]==j){",
    "                    spff[j] = i;",
    "                }",
    "            }",
    "        }",
    "    }",
    "    ",
    "    return spff;",
    "}",
    "",
    "vector<ll> primeFactorization(ll n) {",
    "    vector<ll> factors;",
    "    while (n != 1) {",
    "        factors.push_back(spf[n]);",
    "        n /= spf[n];",
    "    }",
    "    return factors;",
    "}"
  ],
  "description": ""
},

  "Divisors of a number": {
  "prefix": "divisors",
  "body": [
    "vector<ll> divisors(ll n){",
    "    vector<ll> divs;",
    "    for(ll i = 1; i*i <= n; i++){",
    "        if(n % i == 0){",
    "            divs.push_back(i);",
    "            if(i != n/i){",
    "                divs.push_back(n/i);",
    "            }",
    "        }",
    "    }",
    "    return divs;",
    "}"
  ],
  "description": ""
},

  "Find Sub String with STL": {
  "prefix": "findsubstring",
  "body": [
    "bool findSubString(string s, string check){",
    "    size_t found = s.find(check);",
    "    if (found != string::npos){",
    "        return true;",
    "    }",
    "    return false;",
    "}"
  ],
  "description": ""
},

  "accessFromAllSide": {
  "prefix": "accessfromallside",
  "body": [
    "void accessFromAllSide(vector<vector<ll>>&arr){",
    "    // One based index array",
    "    // Row = Layers;",
    "    // Column = i;",
    "",
    "    ll n = arr.size()-1;",
    "    ll span = n-2;",
    "    for (ll layer = 1; layer <= n / 2; layer++, span-=2){",
    "        for (ll i = 0; i <= max(1LL*0,span); i++){",
    "            cout << arr[layer][layer+i]<< \" \";",
    "            cout << arr[layer+i][n-layer+1]<< \" \";",
    "            cout << arr[n-layer+1][n-layer+1-i]<< \" \";",
    "            cout << arr[n-layer+1-i][layer]<< \" \";",
    "             cout << endl;",
    "        }",
    "    }",
    "}"
  ],
  "description": ""
},

  "Find the lane from matrix": {
  "prefix": "findlane",
  "body": [
    "ll findLane(ll row, ll col, ll x, ll y){",
    "    ll n = max(row, col);",
    "    ll lane = min(min(x,n-x+1), min(y, n-y+1));",
    "    return lane;",
    "}"
  ],
  "description": ""
},

  "maximumSubArraySumWithValue": {
  "prefix": "maxsubarraysumwithvalue",
  "body": [
    "ll maximumSubArraySumWithValue(vector<ll>&arr){",
    "    ll n = arr.size();",
    "    ll maxSum = LONG_MIN, currSum = 0;",
    "    ll start = -1, end = -1, s=0;",
    "",
    "    for (ll i = 0; i < n; i++){",
    "        if(currSum == 0) s = i;",
    "        currSum += arr[i];",
    "        if(currSum > maxSum){",
    "            maxSum = currSum;",
    "            start = s;",
    "            end = i;",
    "        }",
    "        if(currSum < 0) currSum = 0;",
    "    }",
    "",
    "    cout << \"The subarray is: [\";",
    "    for (int i = start; i <= end; i++) {",
    "        cout << arr[i] << \" \";",
    "    }",
    "    cout << \"]\" << endl;",
    "",
    "    return maxSum;",
    "}"
  ],
  "description": ""
},

  "maximumSubArraySum": {
  "prefix": "maxsubarraysum",
  "body": [
    "ll maximumSubArraySum(vector<ll>&arr){",
    "    ll n = arr.size();",
    "    ll maxSum = LONG_MIN, currSum = 0;",
    "",
    "    for (ll i = 0; i < n; i++){",
    "        currSum += arr[i];",
    "        maxSum = max(maxSum, currSum);",
    "        if(currSum < 0) currSum = 0;",
    "    }",
    "    return maxSum;",
    "}",
    ""
  ],
  "description": ""
},

  "Segmented Sieve": {
  "prefix": "segmentedsieve",
  "body": [
    "vector<ll> findAllPrimes(ll n) {",
    "    vector<ll> prime(n + 1, 1);",
    "    ",
    "    prime[0] = prime[1] = 0; ",
    "    ",
    "    for (ll i = 2; i*i <= n; ++i) {",
    "        if (prime[i] == 1) {",
    "            for (ll j = i * i; j <= n; j += i) {",
    "                prime[j] = 0; ",
    "            }",
    "        }",
    "    }",
    "    ",
    "    return prime;",
    "}",
    "",
    "vector<ll>getPrimesInRange(ll L, ll R){",
    "    vector<ll>prime = findAllPrimes(sqrt(R));",
    "    vector<ll>isPrime(R-L+1, 1);",
    "",
    "    for(ll i = 2; i*i <= R; i++){",
    "        if(!prime[i]) continue;",
    "        for(ll j = max(i*i, (L+i-1)/i*i); j <= R; j += i){",
    "            isPrime[j-L] = 0;",
    "        }",
    "    }",
    "    if(L == 1) isPrime[0] = 0;",
    "    return isPrime;",
    "}",
    "",
    "void printPrimesInRange(ll L, ll R){",
    "    // ll L = 30, R = 70;",
    "    vector<ll>primes = getPrimesInRange(L, R);",
    "    for(ll i = 0; i < primes.size(); i++){",
    "        if(primes[i]) cout << i + L << \" \";",
    "    }",
    "}"
  ],
  "description": ""
},

  "Prime Factors": {
  "prefix": "primefactors",
  "body": [
    "vector<ll> primeFactor(ll n) {",
    "    vector<ll>ans;",
    "    for(ll i = 2; i * i <= n; i++) {",
    "        if(n % i == 0) {",
    "            while(n % i == 0) {",
    "                ans.push_back(i);",
    "                n /= i;",
    "            }",
    "        }",
    "    }",
    "    if(n > 1) {",
    "        ans.push_back(n);",
    "    }",
    "    return ans;",
    "}"
  ],
  "description": ""
},

  "Sieve": {
  "prefix": "sieve",
  "body": [
    "vector<ll> findAllPrimes(ll n) {",
    "    vector<ll> prime(n + 1, 1);",
    "    ",
    "    prime[0] = prime[1] = 0; ",
    "    ",
    "    for (ll i = 2; i*i <= n; ++i) {",
    "        if (prime[i] == 1) {",
    "            for (ll j = i * i; j <= n; j += i) {",
    "                prime[j] = 0; ",
    "            }",
    "        }",
    "    }",
    "    ",
    "    return prime;",
    "}"
  ],
  "description": ""
},

  "Symmetry Check Matrix": {
  "prefix": "symmetrycheck",
  "body": [
    "for (ll i = 0; i < n; i++) {",
    "		for (ll j = 0; j < n; j++) {",
    "			if (a[i][j] != a[n - 1 - i][n - 1 - j]) {",
    "				",
    "			}",
    "		}",
    "	}"
  ],
  "description": ""
},

  "Matrix Move": {
  "prefix": "matrixmove",
  "body": [
    "int matrixmove(int x1, int y1, int n, int m) {",
    "	int dx[] = {1, -1, 0, 0};",
    "	int dy[] = {0, 0, -1, 1};",
    "	int count = 0;",
    "	for (int i = 0; i < 4; i++) {",
    "		int x = x1 + dx[i];",
    "		int y = y1 + dy[i];",
    "		if (x >= 1 and x <= n and y >= 1 and y <= m) {",
    "			count++;",
    "		}",
    "	}",
    "	return count;",
    "}"
  ],
  "description": ""
},

  "LCM": {
  "prefix": "lcm",
  "body": [
    "ll lcm(ll a, ll b) {",
    "	return (a * b) / __gcd(a, b);",
    "}"
  ],
  "description": ""
},
  "Square root": {
  "prefix": "sqrt",
  "body": [
    "l sqrt(ll x) {",
    "	ll left = 0, right = 2000000123;",
    "	while (right > left) {",
    "		ll mid = (left + right) / 2;",
    "",
    "		if (mid * mid > x) right = mid;",
    "		else left = mid + 1;",
    "	}",
    "	return left - 1;",
    "}"
  ],
  "description": ""
},

"Template": {
  "prefix": "naimur",
  "body": [
    "#include<bits/stdc++.h>",
    "",
    "using namespace std;",
    "",
    "#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)",
    "#define MOD 1000000007",
    "#define MOD1 998244353",
    "#define INF 1e18",
    "#define nline \"\\n\"",
    "#define sp \" \"",
    "#define pb push_back",
    "#define ppb pop_back",
    "#define mp make_pair",
    "#define ff first",
    "#define ss second",
    "#define PI 3.141592653589793238462",
    "#define set_bits __builtin_popcountll",
    "#define sz(x) ((int)(x).size())",
    "#define all(x) (x).begin(), (x).end()",
    "#define allr(x) (x).rbegin(), (x).rend()",
    "#define mem1(a) memset(a,-1,sizeof(a))",
    "#define mem0(a) memset(a,0,sizeof(a))",
    "",
    "typedef long long ll;",
    "typedef unsigned long long ull;",
    "typedef long double lld;",
    "// typedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update > pbds; // find_by_order, order_of_key",
    "",
    "#ifndef ONLINE_JUDGE",
    "#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;",
    "#else",
    "#define debug(x)",
    "#endif",
    "",
    "void _print(ll t) {cerr << t;}",
    "void _print(int t) {cerr << t;}",
    "void _print(string t) {cerr << t;}",
    "void _print(char t) {cerr << t;}",
    "void _print(lld t) {cerr << t;}",
    "void _print(double t) {cerr << t;}",
    "void _print(ull t) {cerr << t;}",
    "",
    "template <class T, class V> void _print(pair <T, V> p);",
    "template <class T> void _print(vector <T> v);",
    "template <class T> void _print(set <T> v);",
    "template <class T, class V> void _print(map <T, V> v);",
    "template <class T> void _print(multiset <T> v);",
    "template <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}",
    "template <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}",
    "template <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}",
    "template <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}",
    "template <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}",
    "",
    "",
    "void solve() {",
    "",
    "$0",
    "",
    "}",
    "",
    "int main() {",
    "    fastio();",
    "",
    "#ifndef ONLINE_JUDGE",
    "    freopen(\"Error.txt\", \"w\", stderr);",
    "#endif",
    "",
    "",
    "    int t; cin >> t;",
    "    while (t--) solve();",
    "",
    "",
    "#ifndef ONLINE_JUDGE",
    "    cerr << \"Time : \" << (1000 * ((double)clock()) / (double)CLOCKS_PER_SEC)*0.001 << \"s\\n\";",
    "#endif",
    "",
    "}",
    "",
    "",
    "",
    ""
  ],
  "description": ""
}
}